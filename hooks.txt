1. useState Hook
The useState hook lets you add state to your functional components.

jsx
import React, { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0); // Declare a state variable `count` initialized to 0.

  const increment = () => setCount(count + 1);

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={increment}>Increment</button>
    </div>
  );
}

export default Counter;


2. useEffect Hook
The useEffect hook allows you to perform side effects in your components, such as data fetching, subscriptions, or manual DOM manipulations.

jsx
import React, { useState, useEffect } from 'react';

function FetchData() {
  const [data, setData] = useState(null);

  useEffect(() => {
    // Fetch data when the component mounts
    fetch('https://jsonplaceholder.typicode.com/posts')
      .then(response => response.json())
      .then(data => setData(data))
      .catch(error => console.error('Error fetching data:', error));
  }, []); // Empty array means this effect runs only once, after initial render

  return (
    <div>
      <h1>Posts</h1>
      {data ? (
        <ul>
          {data.map(post => (
            <li key={post.id}>{post.title}</li>
          ))}
        </ul>
      ) : (
        <p>Loading...</p>
      )}
    </div>
  );
}

export default FetchData;


3. useContext Hook
The useContext hook allows you to subscribe to React context without needing to use a Consumer component.

jsx
import React, { createContext, useContext } from 'react';

// Create a context
const UserContext = createContext();

function UserProfile() {
  const user = useContext(UserContext); // Access context value

  return (
    <div>
      <h1>{user.name}</h1>
      <p>{user.email}</p>
    </div>
  );
}

function App() {
  const user = { name: 'John Doe', email: 'john.doe@example.com' };

  return (
    <UserContext.Provider value={user}>
      <UserProfile />
    </UserContext.Provider>
  );
}

export default App;


4. useReducer Hook
The useReducer hook is used for managing more complex state logic that involves multiple sub-values or when the next state depends on the previous one.

jsx
import React, { useReducer } from 'react';

// Reducer function
function counterReducer(state, action) {
  switch (action.type) {
    case 'INCREMENT':
      return { count: state.count + 1 };
    case 'DECREMENT':
      return { count: state.count - 1 };
    default:
      return state;
  }
}

function Counter() {
  const [state, dispatch] = useReducer(counterReducer, { count: 0 });

  return (
    <div>
      <p>Count: {state.count}</p>
      <button onClick={() => dispatch({ type: 'INCREMENT' })}>Increment</button>
      <button onClick={() => dispatch({ type: 'DECREMENT' })}>Decrement</button>
    </div>
  );
}

export default Counter;


5. useRef Hook
The useRef hook is used to persist values across renders without causing re-renders, and it can also be used to access DOM elements directly.

jsx
import React, { useRef } from 'react';

function FocusInput() {
  const inputRef = useRef(null);

  const focusInput = () => {
    inputRef.current.focus(); // Focus on the input field
  };

  return (
    <div>
      <input ref={inputRef} type="text" placeholder="Focus me!" />
      <button onClick={focusInput}>Focus Input</button>
    </div>
  );
}

export default FocusInput;


6. useMemo Hook
The useMemo hook is used to memoize expensive calculations so that they are only recalculated when their dependencies change.

jsx
import React, { useMemo, useState } from 'react';

function ExpensiveCalculation() {
  const [number, setNumber] = useState(1);

  // Memoize expensive calculation
  const factorial = useMemo(() => {
    console.log('Calculating factorial...');
    let result = 1;
    for (let i = 1; i <= number; i++) {
      result *= i;
    }
    return result;
  }, [number]); // Recalculate only when `number` changes

  return (
    <div>
      <p>Factorial of {number}: {factorial}</p>
      <button onClick={() => setNumber(number + 1)}>Increase Number</button>
    </div>
  );
}

export default ExpensiveCalculation;


7. useCallback Hook
The useCallback hook returns a memoized version of a callback function that only changes if one of the dependencies has changed.

jsx
import React, { useState, useCallback } from 'react';

function Parent() {
  const [count, setCount] = useState(0);

  const increment = useCallback(() => {
    setCount(prevCount => prevCount + 1);
  }, []); // `increment` will not change unless dependencies change

  return (
    <div>
      <Child increment={increment} />
      <p>Parent Count: {count}</p>
    </div>
  );
}

function Child({ increment }) {
  console.log('Child rendered');
  return <button onClick={increment}>Increment</button>;
}

export default Parent;